#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import argparse
import sys
import logging
from enum import Enum

from pero_ocr.core.layout import PageLayout


class Result(Enum):
    UNPROCESSED = 0
    OK = 1
    REGION_COUNT_MISMATCH = 2
    LINE_COUNT_MISMATCH = 3
    HYP_MISSING = 4
    REF_MISSING = 5
    BOTH_MISSING = 6


results_description = {
    Result.UNPROCESSED: 'unprocessed',
    Result.OK: 'are ok',
    Result.REGION_COUNT_MISMATCH: 'have region count mismatch',
    Result.LINE_COUNT_MISMATCH: 'have line count mismatch',
    Result.HYP_MISSING: 'have hyp missing',
    Result.REF_MISSING: 'have ref missing',
    Result.BOTH_MISSING: 'have both missing',
}


def parse_arguments():
    parser = argparse.ArgumentParser(
        description='Compare two folders with page layouts and output their structural and content differences.')
    parser.add_argument('--print-all', action='store_true', help='Report info per page layout.')
    parser.add_argument('--hyp', required=True, help='Folder with page xmls whose will be compared to reference')
    parser.add_argument('--ref', required=True, help='Folder with reference page xmls.')
    args = parser.parse_args()
    return args


def read_pagexml(path):
    try:
        page_layout = PageLayout(file=path)
    except OSError:
        print(f'Warning: unable to load page xml "{path}"')
        return None
    return page_layout


def compare_page_layouts(hyp_fn, ref_fn, xml_file, results) -> dict:
    hyp_page = read_pagexml(hyp_fn)
    ref_page = read_pagexml(ref_fn)
    if hyp_page is None and ref_page is None:
        logging.debug(f'{xml_file}:\tboth missing')
        results[xml_file] = Result.BOTH_MISSING
        return results
    if hyp_page is None and ref_page is not None:
        results[xml_file] = Result.HYP_MISSING
        logging.debug(f'{xml_file}:\thyp missing')
        return results
    if hyp_page is not None and ref_page is None:
        results[xml_file] = Result.REF_MISSING
        logging.debug(f'{xml_file}:\tref missing')
        return results

    if len(hyp_page.regions) != len(ref_page.regions):
        results[xml_file] = Result.REGION_COUNT_MISMATCH
        logging.debug(f'{xml_file}:\tregions count mismatch '
                      f'(hyp:{len(hyp_page.regions)} vs ref:{len(ref_page.regions)})')
        return results

    hyp_lines = len([1 for _ in hyp_page.lines_iterator()])
    ref_lines = len([1 for _ in ref_page.lines_iterator()])
    if hyp_lines != ref_lines:
        results[xml_file] = Result.LINE_COUNT_MISMATCH
        logging.debug(f'{xml_file}:\tlines count mismatch '
                      f'(hyp:{hyp_lines} vs ref:{ref_lines})')
        return results

    results[xml_file] = Result.OK
    # compare content of lines somehow? (problem with aligning due to different ids generated by pero)
    # Can be done like this: take all lines to a list, sort them alphabetically, then compare them one by one.

    return results


def group_results(results):
    grouped_results = {result: 0 for result in set(results.values())}

    for _, result in results.items():
        grouped_results[result] += 1

    return grouped_results


def print_results(results, print_all):
    total_files = len(results)
    results = group_results(results)
    ok_count = results.get(Result.OK, 0)
    results.pop(Result.OK, None)

    logging.debug(f'{total_files} files total:')
    logging.debug(f'\t{ok_count} {results_description[Result.OK]}')
    for result, desc in sorted(results_description.items(), key=lambda x: x[0].value):
        result_count = results.get(result, 0)
        if result_count > 0:
            logging.debug(f'\t{result_count} {desc}')

    if not print_all:
        if ok_count == total_files:
            logging.info('All files are ok.')
        else:
            logging.info('Some files are not ok.')


def setup_logging(print_all):
    logging.getLogger().handlers[0].setFormatter(logging.Formatter('%(message)s'))  # print only message

    if print_all:
        logging.root.setLevel(logging.DEBUG)
    else:
        logging.root.setLevel(logging.INFO)


def main():
    args = parse_arguments()
    setup_logging(args.print_all)

    xml_to_process = set(f for f in os.listdir(args.ref) if os.path.splitext(f)[1] == '.xml')
    xml_to_process |= set(f for f in os.listdir(args.hyp) if os.path.splitext(f)[1] == '.xml')

    results = {xml_file: Result.UNPROCESSED for xml_file in xml_to_process}

    for xml_file in xml_to_process:
        hyp_path = os.path.join(args.hyp, xml_file)
        ref_path = os.path.join(args.ref, xml_file)
        results = compare_page_layouts(hyp_path, ref_path, xml_file, results)

    print_results(results, args.print_all)


if __name__ == "__main__":
    main()
